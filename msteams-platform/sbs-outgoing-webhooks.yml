### YamlMime:Tutorial
title: Build Outgoing Webhooks
metadata:
  title: Build Outgoing Webhooks
  description: In this tutorial, you'll learn to set up Outgoing Webhooks for Teams.
  audience: Developer
  level: Beginner
  ms.date: 14/01/2022
  ms.topic: interactive-tutorial
  nextTutorialHref: webhooks-and-connectors/how-to/add-outgoing-webhook.md
  nextTutorialTitle: Read more on Outgoing Webhooks
  ms.custom: mvc
  ms.localizationpriority: High
items:
- durationInMinutes: 1
  content: |
    Webhooks help Microsoft Teams to integrate with external apps. In Teams, the Outgoing Webhooks act as bot and search for messages in channels using **@mention**. The Outgoing Webhooks allow users to send messages to web services without performing the entire process of creating bots through Microsoft Bot Framework. The Outgoing Webhooks post data from Teams to any service capable of accepting JSON payload. 
    
    **Key features of Outgoing Webhooks**
    
    * Send notifications to any external web service.
    * Respond with rich text messages including cards and images. 
    * Receive messages in public channels and not within the personal or private scope.
    * Send HTTP POST to web service and get response. 
    
     > [!NOTE]
     > The Outgoing Webhooks can't access any other APIs, such as retrieve the roster or list of channels in a team.
    
    This step-by-step guide helps you to create Outgoing Webhooks in Teams. You'll see the following output:

    ![ready](~/assets/images/sbs-outgoing-webhooks/output-result1.png)

- title: Prerequisites
  durationInMinutes: 1
  content: |
    Ensure you install the following tools and set up your development environment:  

    * [Microsoft Teams](https://teams.microsoft.com/) with valid account
    * [Latest version of Visual Studio](https://visualstudio.microsoft.com/downloads/)
    * [ngrok](https://ngrok.com/download) latest version (only for devbox testing) or any equivalent tunneling solution
    
      > [!NOTE]
      > After downloading ngrok, sign up and install [authtoken](https://ngrok.com/download).
    
- title: Set up local environment
  durationInMinutes: 1
  content: |
   Clone `Microsoft-Teams-Samples` repository to your local GitHub:  

    1. Open [Microsoft Teams Samples](https://github.com/OfficeDev/Microsoft-Teams-Samples).
    1. Select **Code**.
    1. From the dropdown menu, select **Open with GitHub Desktop**.
 
       ![Clone](~/assets/images/sbs-outgoing-webhooks/clone-repository.png)

    1. Select **Clone**. 

- title: Create Outgoing Webhooks
  durationInMinutes: 5
  content: |
    1. Select the required team, and then select **Manage team** from the (•••) dropdown menu.

       ![Manage](~/assets/images/sbs-outgoing-webhooks/manage-team.png)

    1. Choose the **Apps** tab from the navigation bar.

       ![Choose](~/assets/images/sbs-outgoing-webhooks/app-selection.png)

    1. Use ngrok to create a tunnel to your locally running web server's publicly available HTTPS endpoints. Run the following command in ngrok:

        ```bash
        ngrok http --host-header=localhost 3978
        ```

    1. From the window's lower-right corner, select **Create an Outgoing Webhook**.

       ![Outgoing](~/assets/images/sbs-outgoing-webhooks/create-outgoing-webhook.png).

    1. Enter the following details:
     
        * **Name**: The webhook title in @mention tab.

        * **Callback URL**: The URL generated from ngrok that accepts JSON payloads and receives POST requests from Teams. To use the api/Sample or api/authenticatedSample, do the following:

            * For api/sample, copy-and-paste ngrok URL and append it with /api/sample.

            * For authenticated sample, copy-and-paste ngrok URL and append it with /authenticatedSample?id=contoso.

        * **Description**: A detailed string that will appear in the profile card and the team-level App dashboard.

        * **Profile picture (optional)**: App icon for your webhook.

    1. Select **Create**. The Outgoing Webhook is added to the current team's channel.

        ![Create Outgoing Webhook](~/assets/images/sbs-outgoing-webhooks/select.png)

    1. A `Hash-based Message Authentication Code (HMAC)` dialogue box appears. You can use the security token in **AuthProvider.cs** file to authenticate calls between Teams and any designated outside services. 

        > [!NOTE]
        > The Outgoing Webhook is available to the team's users, only if the URL is valid and the server, and client authentication tokens are equal. For example, an HMAC handshake.
                    
         ![Code](~/assets/images/sbs-outgoing-webhooks/security-token.png)   

- title: Build and run the service
  durationInMinutes: 1
  content: |
       1. Launch the latest version of Visual Studio.

       1. Navigate to **File** > **Open** > **Project/Solution**.
    
           ![Open file](~/assets/images//sbs-outgoing-webhooks/outgoing-webhooks-VSopenfile.png)

       1. Select **WebhookSampleBot.sln** file from **csharp** folder.

           ![Solution File](~/assets/images//sbs-outgoing-webhooks/open-project.png)

       1. Update the **"contoso"** to "M365x712764" and HMAC in **AuthProvider.cs** file.  

           ![update](~/assets/images//sbs-outgoing-webhooks/update-hmac2.png)
      
       1. Press **F5** to run the project.

       1. Select **Yes** if the following dialog appears:

           ![Trust Certificate](~/assets/images//sbs-outgoing-webhooks/outgoing-webhook-certificate.png)

          A webpage displays local host information.

           ![App ready](~/assets/images//sbs-outgoing-webhooks/outgoing-webhooks-ready.png)                  

- title: Interact with the app in Teams
  durationInMinutes: 1
  content: |
    1. Select **General** to start a new conversation.

    1. Select **New conversation** to begin a conversation.

    1. Enter **\@mention** the name of the Outgoing Webhook to invoke it in the channel. 

       ![message](~/assets/images/sbs-outgoing-webhooks/type-mention.png)

    1. Select **send**.

       > [!NOTE]
       >  You can send Adaptive Card, Hero card, and text messages as attachment with Outgoing Webhook.

    1. The meeting chat displays new message.

       ![ready](~/assets/images/sbs-outgoing-webhooks/output-result.png)
       
- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with something like this?

       ![ready](~/assets/images/sbs-outgoing-webhooks/output-result1.png)

- content: |
    You've completed the tutorial to get started with a Outgoing Webhook app!


